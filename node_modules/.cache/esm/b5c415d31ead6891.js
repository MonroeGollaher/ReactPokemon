let fs,BaseController,logger;_1ea‍.x([["Paths",()=>Paths],["RegisterControllers",()=>RegisterControllers],["RegisterSocketHandlers",()=>RegisterSocketHandlers],["attachHandlers",()=>attachHandlers]]);_1ea‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_1ea‍.w("./server/utils/BaseController",[["default",["BaseController"],function(v){BaseController=v}]]);_1ea‍.w("./server/utils/Logger",[["logger",["logger"],function(v){logger=v}]]);/* eslint-disable node/no-path-concat */




       class Paths {
  static get Public() {
    return `${__dirname}/client/`
  }

  static get Server() {
    return `${__dirname}/server`
  }

  static get Controllers() {
    return this.Server + '/controllers'
  }

  static get Handlers() {
    return this.Server + '/handlers'
  }
}

       function RegisterControllers(router) {
  const controllers = fs.readdirSync(Paths.Controllers)
  controllers.forEach(loadController)
  async function loadController(controllerName) {
    try {
      if (!controllerName.endsWith('.js')) return
      const fileHandler = await _1ea‍.i(Paths.Controllers + '/' + controllerName)
      let ControllerClass = fileHandler[controllerName.slice(0, -3)]
      if (ControllerClass.default) {
        ControllerClass = ControllerClass.default
      }
      const controller = new ControllerClass()
      if (controller instanceof BaseController) {
        router.use(controller.mount, controller.router)
      }
    } catch (e) {
      logger.error(
        '[CONTROLLER ERROR] unable to load controller, potential duplication, review mount path and controller class name, and see error below',
        controllerName,
        e
      )
    }
  }
}

const HANDLERS = []

       async function RegisterSocketHandlers() {
  const directory = Paths.Handlers
  const handlers = fs.readdirSync(directory)
  handlers.forEach(async(handlerName) => {
    try {
      if (!handlerName.endsWith('.js')) { return }
      const fileHandler = await _1ea‍.i(directory + '/' + handlerName)
      let HandlerClass = fileHandler[handlerName.slice(0, -3)]
      if (HandlerClass.default) {
        HandlerClass = HandlerClass.default
      }
      HANDLERS.push(HandlerClass)
    } catch (e) {
      logger.error(
        '[SOCKET_HANDLER_ERROR] unable to attach socket handler, potential duplication, review mount path and controller class name, and see error below',
        handlerName,
        e
      )
    }
  })
}

       async function attachHandlers(io, socket, user, profile) {
  HANDLERS.forEach(Handler => {
    try {
      const handler = new Handler(io, socket, user, profile)
      logger.log('Attached', handler)
    } catch (e) {
      logger.error(
        '[SOCKET_HANDLER_ERROR] unable to attach socket handler, potential duplication, review mount path and controller class name, and see error below',
        e
      )
    }
  })
}
